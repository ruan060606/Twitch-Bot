{"version":3,"sources":["../../src/Api/index.js"],"names":["validators","Api","maybeOptions","readyState","status","options","apiOptions","headers","Accept","clientId","undefined","Authorization","token","Promise","resolve","get","then","statusResponse","scope","reject","endpoint","fetch","call","method","maybeUrl","url","urlRoot","res","deep"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAGA;;;;AACA;;IAAYA,U;;;;;;;;AAEZ;;;;;;;;;;;;IAYMC,G;;AA0BJ;;;;;AAzBA;;;;AA6BA,iBAA+B;AAAA,QAAnBC,YAAmB,uEAAJ,EAAI;;AAAA;;AAAA,SAzB/BC,UAyB+B,GAzBlB,CAyBkB;AAAA,SAN/BC,MAM+B,GANtB,EAMsB;;AAC7B,QAAMC,UAAUL,WAAWM,UAAX,CAAsBJ,YAAtB,CAAhB;;AAEA,SAAKG,OAAL,GAAeA,OAAf;;AAEA,SAAKE,OAAL,GAAe;AACbC,cAAQ,kCADK;AAEb,mBAAaH,QAAQI,QAAR,GAAmBJ,QAAQI,QAA3B,GAAsCC,SAFtC;AAGbC,qBAAeN,QAAQO,KAAR,cAAyBP,QAAQO,KAAjC,GAA2CF;AAH7C,KAAf;AAKD;;AAED;;;;;;;AAnCA;;;;;;;;;;;;;AAaA;;;;;;;;iCA2Ba;AAAA;;AACX,UAAI,KAAKP,UAAL,KAAoB,CAAxB,EAA2B;AACzB,eAAOU,QAAQC,OAAR,EAAP;AACD;;AAED,aAAO,KAAKC,GAAL,GAAWC,IAAX,CAAgB,0BAAkB;AACvC,cAAKb,UAAL,GAAkB,CAAlB;AACA,cAAKC,MAAL,GAAca,cAAd;;AAEA,eAAOA,cAAP;AACD,OALM,CAAP;AAMD;;AAED;;;;;;;;;6BAMSC,K,EAAO;AAAA;;AACd,aAAO,IAAIL,OAAJ,CAAY,UAACC,OAAD,EAAUK,MAAV,EAAqB;AACtC,YAAI,OAAKhB,UAAL,KAAoB,CAAxB,EAA2B;AACzB,iBAAOgB,OAAO,KAAP,CAAP;AACD;;AAED,eAAO,wBAAS,mBAAI,OAAKf,MAAT,EAAiB,4BAAjB,EAA+C,EAA/C,CAAT,EAA6Dc,KAA7D,IACHJ,QAAQ,IAAR,CADG,GAEHK,OAAO,KAAP,CAFJ;AAGD,OARM,CAAP;AASD;;AAED;;;;;;;;;;;;;;wBAWIC,Q,EAAwB;AAAA,UAAdf,OAAc,uEAAJ,EAAI;;AAC1B,aAAOgB,MAAMC,IAAN,CAAW,IAAX,EAAiBF,QAAjB,EAA2Bf,OAA3B,CAAP;AACD;;AAED;;;;;;;;yBAKKe,Q,EAAwB;AAAA,UAAdf,OAAc,uEAAJ,EAAI;;AAC3B,aAAOgB,MAAMC,IAAN,CAAW,IAAX,EAAiBF,QAAjB,eAAgCf,OAAhC,IAAyCkB,QAAQ,MAAjD,IAAP;AACD;;AAED;;;;;;;;wBAKIH,Q,EAAwB;AAAA,UAAdf,OAAc,uEAAJ,EAAI;;AAC1B,aAAOgB,MAAMC,IAAN,CAAW,IAAX,EAAiBF,QAAjB,eAAgCf,OAAhC,IAAyCkB,QAAQ,KAAjD,IAAP;AACD;;;;;;AAGH,SAASF,KAAT,GAA4C;AAAA,MAA7BG,QAA6B,uEAAlB,EAAkB;AAAA,MAAdnB,OAAc,uEAAJ,EAAI;;AAC1C,MAAMoB,MAAM,uBAAQD,QAAR,EAAkB,MAAlB,EAA0B,EAA1B,CAAZ;;AAEA,SAAO,qBAAa,KAAKnB,OAAL,CAAaqB,OAA1B,SAAqCD,GAArC,eACFpB,OADE;AAELE,0BACKF,QAAQE,OADb,EAEK,KAAKA,OAFV;AAFK,MAMJS,IANI,CAMC;AAAA,WAAO,6BAAcW,GAAd,EAAmB,EAAEC,MAAM,IAAR,EAAnB,CAAP;AAAA,GAND,CAAP;AAOD;;kBAEc3B,G","file":"index.js","sourcesContent":["import camelcaseKeys from 'camelcase-keys'\nimport { get, includes, replace } from 'lodash'\n\nimport fetchUtil from '../utils/fetch'\nimport * as validators from './utils/validators'\n\n/**\n * API client\n *\n * @example <caption>Get Featured Streams</caption>\n * const token = 'cfabdegwdoklmawdzdo98xt2fo512y'\n * const username = 'ronni'\n * const { api } = new TwitchJs({ token, username })\n *\n * api.get('streams/featured').then(response => {\n *   // Do stuff ...\n * })\n */\nclass Api {\n  /**\n   * API client ready state : **1** ready; **2** initialized.\n   * @type {number}\n   */\n  readyState = 1\n\n  /**\n   * API status state.\n   * @typedef {Object} ApiStatusState\n   * @property {Object} token\n   * @property {Object} token.authorization\n   * @property {Array<string>} token.authorization.scopes\n   * @property {string} token.authorization.createdAt\n   * @property {string} token.authorization.updatedAt\n   * @property {string} token.clientId\n   * @property {string} token.userId\n   * @property {string} token.userName\n   * @property {boolean} token.valid\n   */\n  /**\n   * API status.\n   * @type {ApiStatusState}\n   */\n  status = {}\n\n  /**\n   * API constructor.\n   * @param {ApiOptions} options\n   */\n  constructor(maybeOptions = {}) {\n    const options = validators.apiOptions(maybeOptions)\n\n    this.options = options\n\n    this.headers = {\n      Accept: 'application/vnd.twitchtv.v5+json',\n      'Client-ID': options.clientId ? options.clientId : undefined,\n      Authorization: options.token ? `OAuth ${options.token}` : undefined,\n    }\n  }\n\n  /**\n   * Initialize API client and retrieve status.\n   * @returns {Promise<ApiStatusState, Object>}\n   * @see https://dev.twitch.tv/docs/v5/#root-url\n   */\n  initialize() {\n    if (this.readyState === 2) {\n      return Promise.resolve()\n    }\n\n    return this.get().then(statusResponse => {\n      this.readyState = 2\n      this.status = statusResponse\n\n      return statusResponse\n    })\n  }\n\n  /**\n   * Check if current credentials include `scope`.\n   * @param {string} scope Scope to check.\n   * @return {Promise<boolean, boolean>}\n   * @see https://dev.twitch.tv/docs/authentication/#twitch-api-v5\n   */\n  hasScope(scope) {\n    return new Promise((resolve, reject) => {\n      if (this.readyState !== 2) {\n        return reject(false)\n      }\n\n      return includes(get(this.status, 'token.authorization.scopes', []), scope)\n        ? resolve(true)\n        : reject(false)\n    })\n  }\n\n  /**\n   * GET endpoint.\n   * @param {string} endpoint\n   * @param {FetchOptions} [options]\n   *\n   * @example <caption>Get Live Streams</caption>\n   * api.get('streams', { search: { game: 'Overwatch' } })\n   *   .then(response => {\n   *     // Do stuff with response ...\n   *   })\n   */\n  get(endpoint, options = {}) {\n    return fetch.call(this, endpoint, options)\n  }\n\n  /**\n   * POST endpoint.\n   * @param {string} endpoint\n   * @param {FetchOptions} [options={method:'post'}]\n   */\n  post(endpoint, options = {}) {\n    return fetch.call(this, endpoint, { ...options, method: 'post' })\n  }\n\n  /**\n   * PUT endpoint.\n   * @param {string} endpoint\n   * @param {FetchOptions} [options={method:'put'}]\n   */\n  put(endpoint, options = {}) {\n    return fetch.call(this, endpoint, { ...options, method: 'put' })\n  }\n}\n\nfunction fetch(maybeUrl = '', options = {}) {\n  const url = replace(maybeUrl, /^\\//g, '')\n\n  return fetchUtil(`${this.options.urlRoot}/${url}`, {\n    ...options,\n    headers: {\n      ...options.headers,\n      ...this.headers,\n    },\n  }).then(res => camelcaseKeys(res, { deep: true }))\n}\n\nexport default Api\n"]}