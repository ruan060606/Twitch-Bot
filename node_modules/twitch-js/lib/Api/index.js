'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _replace2 = require('lodash/replace');

var _replace3 = _interopRequireDefault(_replace2);

var _includes2 = require('lodash/includes');

var _includes3 = _interopRequireDefault(_includes2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _camelcaseKeys = require('camelcase-keys');

var _camelcaseKeys2 = _interopRequireDefault(_camelcaseKeys);

var _fetch = require('../utils/fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _validators = require('./utils/validators');

var validators = _interopRequireWildcard(_validators);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * API client
 *
 * @example <caption>Get Featured Streams</caption>
 * const token = 'cfabdegwdoklmawdzdo98xt2fo512y'
 * const username = 'ronni'
 * const { api } = new TwitchJs({ token, username })
 *
 * api.get('streams/featured').then(response => {
 *   // Do stuff ...
 * })
 */
var Api = function () {

  /**
   * API constructor.
   * @param {ApiOptions} options
   */

  /**
   * API client ready state : **1** ready; **2** initialized.
   * @type {number}
   */
  function Api() {
    var maybeOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Api);

    this.readyState = 1;
    this.status = {};

    var options = validators.apiOptions(maybeOptions);

    this.options = options;

    this.headers = {
      Accept: 'application/vnd.twitchtv.v5+json',
      'Client-ID': options.clientId ? options.clientId : undefined,
      Authorization: options.token ? 'OAuth ' + options.token : undefined
    };
  }

  /**
   * Initialize API client and retrieve status.
   * @returns {Promise<ApiStatusState, Object>}
   * @see https://dev.twitch.tv/docs/v5/#root-url
   */


  /**
   * API status state.
   * @typedef {Object} ApiStatusState
   * @property {Object} token
   * @property {Object} token.authorization
   * @property {Array<string>} token.authorization.scopes
   * @property {string} token.authorization.createdAt
   * @property {string} token.authorization.updatedAt
   * @property {string} token.clientId
   * @property {string} token.userId
   * @property {string} token.userName
   * @property {boolean} token.valid
   */
  /**
   * API status.
   * @type {ApiStatusState}
   */


  _createClass(Api, [{
    key: 'initialize',
    value: function initialize() {
      var _this = this;

      if (this.readyState === 2) {
        return Promise.resolve();
      }

      return this.get().then(function (statusResponse) {
        _this.readyState = 2;
        _this.status = statusResponse;

        return statusResponse;
      });
    }

    /**
     * Check if current credentials include `scope`.
     * @param {string} scope Scope to check.
     * @return {Promise<boolean, boolean>}
     * @see https://dev.twitch.tv/docs/authentication/#twitch-api-v5
     */

  }, {
    key: 'hasScope',
    value: function hasScope(scope) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        if (_this2.readyState !== 2) {
          return reject(false);
        }

        return (0, _includes3.default)((0, _get3.default)(_this2.status, 'token.authorization.scopes', []), scope) ? resolve(true) : reject(false);
      });
    }

    /**
     * GET endpoint.
     * @param {string} endpoint
     * @param {FetchOptions} [options]
     *
     * @example <caption>Get Live Streams</caption>
     * api.get('streams', { search: { game: 'Overwatch' } })
     *   .then(response => {
     *     // Do stuff with response ...
     *   })
     */

  }, {
    key: 'get',
    value: function get(endpoint) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return fetch.call(this, endpoint, options);
    }

    /**
     * POST endpoint.
     * @param {string} endpoint
     * @param {FetchOptions} [options={method:'post'}]
     */

  }, {
    key: 'post',
    value: function post(endpoint) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return fetch.call(this, endpoint, _extends({}, options, { method: 'post' }));
    }

    /**
     * PUT endpoint.
     * @param {string} endpoint
     * @param {FetchOptions} [options={method:'put'}]
     */

  }, {
    key: 'put',
    value: function put(endpoint) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return fetch.call(this, endpoint, _extends({}, options, { method: 'put' }));
    }
  }]);

  return Api;
}();

function fetch() {
  var maybeUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var url = (0, _replace3.default)(maybeUrl, /^\//g, '');

  return (0, _fetch2.default)(this.options.urlRoot + '/' + url, _extends({}, options, {
    headers: _extends({}, options.headers, this.headers)
  })).then(function (res) {
    return (0, _camelcaseKeys2.default)(res, { deep: true });
  });
}

exports.default = Api;
//# sourceMappingURL=index.js.map