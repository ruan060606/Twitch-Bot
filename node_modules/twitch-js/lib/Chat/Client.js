'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _eventemitter = require('eventemitter3');

var _uws = require('../../shims/uws');

var _uws2 = _interopRequireDefault(_uws);

var _constants = require('./constants');

var constants = _interopRequireWildcard(_constants);

var _parsers = require('./utils/parsers');

var _parsers2 = _interopRequireDefault(_parsers);

var _validators = require('./utils/validators');

var validators = _interopRequireWildcard(_validators);

var _utils = require('./utils');

var utils = _interopRequireWildcard(_utils);

var _Queue = require('./Queue');

var _Queue2 = _interopRequireDefault(_Queue);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var priority = constants.CLIENT_PRIORITY;

var Client = function (_EventEmitter) {
  _inherits(Client, _EventEmitter);

  function Client() {
    var maybeOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Client);

    // Validate options.
    var _this = _possibleConstructorReturn(this, (Client.__proto__ || Object.getPrototypeOf(Client)).call(this));

    var options = validators.clientOptions(maybeOptions);

    // Instantiate WebSocket.
    var protocol = options.ssl ? 'wss' : 'ws';
    var ws = new _uws2.default(protocol + '://' + options.server + ':' + options.port);

    ws.onopen = handleOpen.bind(_this, options);
    ws.onmessage = handleMessage.bind(_this);
    ws.onerror = handleError.bind(_this);
    ws.onclose = handleClose.bind(_this);

    // Instantiate Queue.
    var queue = new _Queue2.default();

    _this.readyState = ws.readyState;
    _this.send = _this.send.bind({ ws: ws, queue: queue });
    _this.disconnect = _this.disconnect.bind({ ws: ws });
    return _this;
  }

  /**
   * Send message to Twitch
   * @param {string} message
   * @param {Object} options
   * @param {number} options.priority
   * @param {MessageWeightProps} ...options.weighProps
   */


  _createClass(Client, [{
    key: 'send',
    value: function send(message) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var priority = _ref.priority,
          weighProps = _objectWithoutProperties(_ref, ['priority']);

      var fn = this.ws.send.bind(this.ws, message);

      this.queue.push({
        fn: fn,
        priority: priority,
        weight: utils.getMessageQueueWeight(weighProps)
      });
    }
  }, {
    key: 'disconnect',
    value: function disconnect() {
      this.ws.close();
    }
  }]);

  return Client;
}(_eventemitter.EventEmitter);

function handleOpen(options) {
  // Register for Twitch-specific capabilities.
  this.send('CAP REQ :twitch.tv/tags twitch.tv/commands twitch.tv/membership', {
    priority: priority
  });

  // Authenticate.
  this.send('PASS ' + options.oauth, { priority: priority });
  this.send('NICK ' + options.username, { priority: priority });
}

function handleMessage(messageEvent) {
  var _this2 = this;

  // console.log(messageEvent.data)
  var rawMessage = messageEvent.data;

  try {
    var messages = (0, _parsers2.default)(rawMessage);

    messages.forEach(function (message) {
      // Handle PING/PONG.
      if (message.command === constants.COMMANDS.PING) {
        _this2.send('PONG :tmi.twitch.tv', { priority: priority });
      }

      // Handle successful connections.
      if (message.command === constants.COMMANDS.GLOBAL_USER_STATE) {
        _this2.emit(constants.EVENTS.CONNECTED, _extends({}, message, {
          command: constants.EVENTS.CONNECTED
        }));
      }

      // Emit all messages.
      _this2.emit(constants.EVENTS.ALL, message);
    });
  } catch (error) {
    var message = {
      _raw: rawMessage,
      timestamp: new Date(),
      event: constants.EVENTS.PARSE_ERROR_ENCOUNTERED,
      message: error
    };

    this.emit(constants.EVENTS.PARSE_ERROR_ENCOUNTERED, message);

    throw new Error(error);
  } finally {
    var _message = {
      _raw: rawMessage,
      timestamp: new Date(),
      event: constants.EVENTS.RAW
    };

    this.emit(constants.EVENTS.RAW, _message);
  }
}

function handleError(error) {
  var message = {
    timestamp: new Date(),
    event: constants.EVENTS.ERROR_ENCOUNTERED,
    message: error
  };

  this.emit(constants.EVENTS.ALL, message);
  this.emit(constants.EVENTS.ERROR_ENCOUNTERED, message);
}

function handleClose() {
  var message = {
    timestamp: new Date(),
    event: constants.EVENTS.DISCONNECTED
  };

  this.emit(constants.EVENTS.DISCONNECTED, message);
}

exports.default = Client;
//# sourceMappingURL=Client.js.map