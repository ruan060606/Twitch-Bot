'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.constants = undefined;

var _get3 = require('lodash/get');

var _get4 = _interopRequireDefault(_get3);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get2 = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _eventemitter = require('eventemitter3');

var _utils = require('../utils');

var utils = _interopRequireWildcard(_utils);

var _Client = require('./Client');

var _Client2 = _interopRequireDefault(_Client);

var _constants = require('./constants');

var constants = _interopRequireWildcard(_constants);

var _commands = require('./utils/commands');

var _parsers = require('./utils/parsers');

var parsers = _interopRequireWildcard(_parsers);

var _sanitizers = require('./utils/sanitizers');

var sanitizers = _interopRequireWildcard(_sanitizers);

var _validators = require('./utils/validators');

var validators = _interopRequireWildcard(_validators);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * EventEmitter3 is a high performance EventEmitter
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @external EventEmitter3
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @see {@link https://github.com/primus/eventemitter3 EventEmitter3}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


/**
 * Chat client
 * @extends external:EventEmitter3
 *
 * @emits Chat#*
 * @emits Chat#CLEARCHAT
 * @emits Chat#CLEARCHAT/USER_BANNED
 * @emits Chat#GLOBALUSERSTATE
 * @emits Chat#HOSTTARGET
 * @emits Chat#JOIN
 * @emits Chat#MODE
 * @emits Chat#NAMES
 * @emits Chat#NAMES_END
 * @emits Chat#NOTICE
 * @emits Chat#NOTICE/ROOM_MODS
 * @emits Chat#PART
 * @emits Chat#PRIVMSG
 * @emits Chat#ROOMSTATE
 * @emits Chat#USERNOTICE/RAID
 * @emits Chat#USERNOTICE/RESUBSCRIPTION
 * @emits Chat#USERNOTICE/RITUAL
 * @emits Chat#USERNOTICE/SUBSCRIPTION
 * @emits Chat#USERNOTICE/SUBSCRIPTION_GIFT
 * @emits Chat#USERSTATE
 *
 * @example <caption>Connecting to Twitch and joining #dallas</caption>
 * const token = 'cfabdegwdoklmawdzdo98xt2fo512y'
 * const username = 'ronni'
 * const channel = '#dallas'
 * const { chat } = new TwitchJs({ token, username })
 *
 * chat.connect().then(globalUserState => {
 *   // Listen to all messages
 *   chat.on('*', message => {
 *     // Do stuff with message ...
 *   })
 *
 *   // Listen to PRIVMSG
 *   chat.on('PRIVMSG', privateMessage => {
 *     // Do stuff with privateMessage ...
 *   })
 *
 *   // Do other stuff ...
 *
 *   chat.join(channel).then(channelState => {
 *     // Do stuff with channelState...
 *   })
 * })
 */
var Chat = function (_EventEmitter) {
  _inherits(Chat, _EventEmitter);

  /**
   * Chat constructor.
   * @param {ChatOptions} options
   */


  /** @type {GlobalUserStateTags} */
  function Chat(maybeOptions) {
    _classCallCheck(this, Chat);

    /**
     * Validated options.
     * @type {ChatOptions}
     */
    var _this = _possibleConstructorReturn(this, (Chat.__proto__ || Object.getPrototypeOf(Chat)).call(this));

    _this.readyState = 0;
    _this.userState = {};
    _this.channels = {};
    _this.options = validators.chatOptions(maybeOptions);
    return _this;
  }

  /**
   * Connect to Twitch.
   * @return {Promise<GlobalUserStateMessage, string>} Global user state message
   */


  /** @type {Object.<string, ChannelState>} */

  /**
   * Chat client ready state: **0** not ready; **1** connecting; **2**
   * connected **3**; disconnecting, or; **4** disconnected.
   * @type {number}
   */


  _createClass(Chat, [{
    key: 'connect',
    value: function connect() {
      var _this2 = this;

      var connect = new Promise(function (resolve) {
        if (_this2.readyState === 1) {
          // Already trying to connect, so resolve when connected.
          _this2.once(constants.EVENTS.GLOBAL_USER_STATE, function (globalUserStateMessage) {
            resolve(globalUserStateMessage);
          });
        } else if (_this2.readyState === 2) {
          // Already connected.
          resolve(_this2.userState);
        } else {
          // Connect ...
          _this2.readyState = 1;

          // Create client and connect.
          var client = new _Client2.default(_this2.options);

          // Once the client is connected ...
          client.once(constants.EVENTS.CONNECTED, function (globalUserStateMessage) {
            _this2.readyState = 2;

            // Create commands.
            Object.assign(_this2, _commands.commandsFactory.call(_this2));

            _this2.send = _this2.send.bind(_this2, client);
            _this2.disconnect = _this2.disconnect.bind(_this2, client);

            // Bind events.
            client.on(constants.EVENTS.ALL, handleMessage, _this2);

            // Listen for disconnect.
            client.once(constants.EVENTS.DISCONNECTED, _this2.disconnect);

            handleMessage.call(_this2, globalUserStateMessage);

            // ... resolve.
            resolve(globalUserStateMessage);
          });
        }
      });

      return Promise.race([utils.delayReject(this.options.connectionTimeout, constants.ERROR_CONNECT_TIMED_OUT), connect]);
    }

    /**
     * Sends a raw message to Twitch.
     * @param {string} message - Message to send.
     */

  }, {
    key: 'send',
    value: function send(client, message) {
      client.send(message);
    }

    /**
     * Disconnect from Twitch.
     */

  }, {
    key: 'disconnect',
    value: function disconnect(client) {
      this.readyState = 3;

      client.removeAllListeners();

      this.userState = {};
      this.channels = {};

      this.readyState = 4;
    }

    /**
     * Join a channel.
     * @param {string} channel
     * @return {Promise<ChannelState, string>}
     *
     * @example <caption>Joining #dallas</caption>
     * const channel = '#dallas'
     *
     * chat.join(channel).then(channelState => {
     *   // Do stuff with channelState...
     * })
     *
     * @example <caption>Joining multiple channels</caption>
     * const channels = ['#dallas', '#ronni']
     *
     * Promise.all(channels.map(channel => chat.join(channel)))
     *   .then(channelStates => {
     *     // Listen to all PRIVMSG
     *     chat.on('PRIVMSG', privateMessage => {
     *       // Do stuff with privateMessage ...
     *     })
     *
     *     // Listen to PRIVMSG from #dallas ONLY
     *     chat.on('PRIVMSG/#dallas', privateMessage => {
     *       // Do stuff with privateMessage ...
     *     })
     *     // Listen to all PRIVMSG from #ronni ONLY
     *     chat.on('PRIVMSG/#ronni', privateMessage => {
     *       // Do stuff with privateMessage ...
     *     })
     *   })
     */

  }, {
    key: 'join',
    value: function join(maybeChannel) {
      var _this3 = this;

      var channel = sanitizers.channel(maybeChannel);

      var roomState = utils.onceResolve(this, constants.COMMANDS.ROOM_STATE + '/' + channel);

      var userState = utils.onceResolve(this, constants.COMMANDS.USER_STATE + '/' + channel);

      var join = Promise.all([this.connect, roomState, userState]).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 3),
            _ref2$ = _ref2[1],
            channel = _ref2$.channel,
            roomState = _ref2$.tags,
            userState = _ref2[2].tags;

        /**
         * @typedef {Object} ChannelState
         * Channel state information
         * @property {RoomStateTags} roomState
         * @property {UserStateTags} userState
         */
        var response = { roomState: roomState, userState: userState };
        _this3.channels[channel] = response;
        return response;
      });

      this.send(constants.COMMANDS.JOIN + ' ' + channel);

      return Promise.race([utils.delayReject(this.options.joinTimeout, constants.ERROR_JOIN_TIMED_OUT), join]);
    }

    /**
     * Depart from a channel.
     * @param {string} channel
     */

  }, {
    key: 'part',
    value: function part(maybeChannel) {
      var channel = sanitizers.channel(maybeChannel);

      this.channels[channel] = undefined;
      this.send(constants.COMMANDS.PART + ' ' + channel);
    }

    /**
     * Send a message to a channel.
     * @param {string} channel
     * @param {string} message
     * @return {Promise<UserStateMessage, string>}
     */

  }, {
    key: 'say',
    value: function say(maybeChannel, message) {
      var channel = sanitizers.channel(maybeChannel);

      var userState = utils.onceResolve(this, constants.COMMANDS.USER_STATE + '/' + channel);

      var say = Promise.all([this.connect, userState]);

      this.send(constants.COMMANDS.PRIVATE_MESSAGE + ' ' + channel + ' :' + message);

      return Promise.race([utils.delayReject(this.options.joinTimeout, constants.ERROR_SAY_TIMED_OUT), say]);
    }

    /**
     * Broadcast message to all connected channels.
     * @param {string} message
     * @return {Promise<Array<UserStateMessage>>}
     */

  }, {
    key: 'broadcast',
    value: function broadcast(message) {
      var _this4 = this;

      return Promise.all(Object.keys(this.channels).map(function (channel) {
        return _this4.say(channel, message);
      }));
    }

    /** @private */

  }, {
    key: 'emit',
    value: function emit(eventName, message) {
      var _this5 = this;

      eventName.split('/').reduce(function (parents, current) {
        var eventPartial = [].concat(_toConsumableArray(parents), [current]);
        _get2(Chat.prototype.__proto__ || Object.getPrototypeOf(Chat.prototype), 'emit', _this5).call(_this5, eventPartial.join('/'), message);
        return eventPartial;
      }, []);

      /**
       * All events are also emitted with this event name.
       * @event Chat#*
       */
      _get2(Chat.prototype.__proto__ || Object.getPrototypeOf(Chat.prototype), 'emit', this).call(this, constants.EVENTS.ALL, message);
    }
  }]);

  return Chat;
}(_eventemitter.EventEmitter);

function handleMessage(baseMessage) {
  var channel = sanitizers.channel(baseMessage.channel);

  var displayName = (0, _get4.default)(this.channels, [channel, 'userState', 'displayName'], '');
  var messageDisplayName = (0, _get4.default)(baseMessage, 'state.displayName');
  var isSelf = displayName === messageDisplayName;

  var preMessage = _extends({}, baseMessage, { isSelf: isSelf });

  switch (preMessage.command) {
    case constants.EVENTS.JOIN:
      {
        var message = parsers.joinOrPartMessage(preMessage);
        this.emit(message.command + '/' + channel, message);
        break;
      }
    case constants.EVENTS.PART:
      {
        var _message = parsers.joinOrPartMessage(preMessage);
        this.channels[_message.channel] = undefined;
        this.emit(_message.command + '/' + channel, _message);
        break;
      }
    case constants.EVENTS.NAMES:
      {
        var _message2 = parsers.namesMessage(preMessage);
        this.emit(_message2.command + '/' + channel, _message2);
        break;
      }
    case constants.EVENTS.NAMES_END:
      {
        var _message3 = parsers.namesEndMessage(preMessage);
        this.emit(_message3.command + '/' + channel, _message3);
        break;
      }
    case constants.EVENTS.CLEAR_CHAT:
      {
        var _message4 = parsers.clearChatMessage(preMessage);
        var eventName = _message4.event ? _message4.command + '/' + _message4.event + '/' + channel : _message4.command + '/' + channel;

        this.emit(eventName, _message4);
        break;
      }
    case constants.EVENTS.HOST_TARGET:
      {
        var _message5 = parsers.hostTargetMessage(preMessage);
        this.emit(_message5.command + '/' + channel, _message5);
        break;
      }
    case constants.EVENTS.MODE:
      {
        var _message6 = parsers.modeMessage(preMessage);
        if (_message6.username === this.userState.username) {
          this.channels[_message6.channel].userState.isModerator = _message6.isModerator;
        }
        this.emit(_message6.command + '/' + channel, _message6);
        break;
      }

    case constants.EVENTS.GLOBAL_USER_STATE:
      {
        var _message7 = parsers.globalUserStateMessage(preMessage);
        this.userState = _message7.tags;
        this.emit(_message7.command, _message7);
        break;
      }
    case constants.EVENTS.USER_STATE:
      {
        var _message8 = parsers.userStateMessage(preMessage);
        this.channels = _extends({}, this.channels, _defineProperty({}, channel, _extends({}, this.channels[channel], {
          userState: _message8.userState
        })));
        this.emit(_message8.command + '/' + channel, _message8);
        break;
      }
    case constants.EVENTS.ROOM_STATE:
      {
        var _message9 = parsers.roomStateMessage(preMessage);
        this.channels = _extends({}, this.channels, _defineProperty({}, channel, _extends({}, this.channels[channel], {
          roomState: _message9.roomState
        })));
        this.emit(_message9.command + '/' + channel, _message9);
        break;
      }
    case constants.EVENTS.NOTICE:
      {
        var _message10 = parsers.noticeMessage(preMessage);
        this.emit(_message10.command + '/' + _message10.event + '/' + channel, _message10);
        break;
      }
    case constants.EVENTS.USER_NOTICE:
      {
        var _message11 = parsers.userNoticeMessage(preMessage);
        this.emit(_message11.command + '/' + _message11.event + '/' + channel, _message11);
        break;
      }
    case constants.EVENTS.PRIVATE_MESSAGE:
      {
        var _message12 = parsers.privateMessage(preMessage);
        this.emit(_message12.command + '/' + channel, _message12);
        break;
      }

    default:
      {
        var _eventName = channel === '#' ? preMessage.command : preMessage.command + '/' + channel;
        this.emit(_eventName, preMessage);
      }
  }
}

exports.constants = constants;
exports.default = Chat;
//# sourceMappingURL=index.js.map