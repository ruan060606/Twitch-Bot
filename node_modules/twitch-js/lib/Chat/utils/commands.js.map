{"version":3,"sources":["../../../src/Chat/utils/commands.js"],"names":["utils","constants","commandCreator","command","timeout","confirmations","channel","args","timeoutDelay","length","delayReject","COMMAND_TIMEOUT","ERROR_COMMAND_TIMED_OUT","Promise","resolve","unrecognized","reject","once","NOTICE_MESSAGE_IDS","UNRECOGNIZED_COMMAND","ERROR_COMMAND_UNRECOGNIZED","confirmation","race","map","event","cb","message","result","join","say","commandsFactory","Object","entries","commandMap","reduce","commands","commandCreatorArgs","call","CHAT_COMMANDS","key","value","BAN","COMMANDS","NOTICE","BAN_SUCCESS","ALREADY_BANNED","EMOTE_ONLY","EMOTE_ONLY_ON","ALREADY_EMOTE_ONLY_ON","EMOTE_ONLY_OFF","ALREADY_EMOTE_ONLY_OFF","MODS","EVENTS","ROOM_MODS","ME","CLEAR","COLOR","COMMERCIAL","FOLLOWERS_ONLY","FOLLOWERS_ONLY_OFF","HOST","MOD","PART","R9K","R9K_OFF","SLOW","SLOW_OFF","SUBSCRIBERS","SUBSCRIBERS_OFF","TIMEOUT","UNBAN","UNHOST","UNMOD","WHISPER"],"mappings":"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","file":"commands.js","sourcesContent":["import { camelCase, gt } from 'lodash'\n\nimport * as utils from '../../utils'\nimport * as constants from '../constants'\n\nfunction commandCreator({ command, timeout, confirmations = [] }) {\n  return (channel, ...args) => {\n    const timeoutDelay =\n      gt(timeout, 0) || confirmations.length\n        ? utils.delayReject(\n            timeout || constants.COMMAND_TIMEOUT,\n            constants.ERROR_COMMAND_TIMED_OUT,\n          )\n        : Promise.resolve()\n\n    const unrecognized = new Promise((resolve, reject) => {\n      this.once(constants.NOTICE_MESSAGE_IDS.UNRECOGNIZED_COMMAND, () => {\n        reject(constants.ERROR_COMMAND_UNRECOGNIZED)\n      })\n    })\n\n    const confirmation = Promise.race(\n      confirmations.map(\n        ({ event, cb }) =>\n          new Promise((resolve, reject) => {\n            this.once(event, message => {\n              if (typeof cb !== 'function') {\n                return resolve(message)\n              }\n\n              const result = cb(message, command, ...args)\n              return result === true ? resolve(message) : reject(result)\n            })\n          }),\n      ),\n    )\n\n    const message = `/${command} ${args.join(' ')}`\n    this.say(channel, message)\n\n    return Promise.race([timeoutDelay, unrecognized, confirmation])\n  }\n}\n\nfunction commandsFactory() {\n  return Object.entries(commandMap).reduce(\n    (commands, [command, commandCreatorArgs]) => ({\n      ...commands,\n      [command]: commandCreator.call(this, { ...commandCreatorArgs }),\n    }),\n    {},\n  )\n}\n\nconst commandMap = Object.entries(constants.CHAT_COMMANDS).reduce(\n  (commands, [key, value]) => {\n    switch (value) {\n      case constants.CHAT_COMMANDS.BAN:\n        return {\n          ...commands,\n          [camelCase(key)]: {\n            command: value,\n            confirmations: [\n              {\n                event: `${constants.COMMANDS.NOTICE}/${\n                  constants.NOTICE_MESSAGE_IDS.BAN_SUCCESS\n                }`,\n              },\n              {\n                event: `${constants.COMMANDS.NOTICE}/${\n                  constants.NOTICE_MESSAGE_IDS.ALREADY_BANNED\n                }`,\n              },\n            ],\n          },\n        }\n      case constants.CHAT_COMMANDS.EMOTE_ONLY:\n        return {\n          ...commands,\n          [camelCase(key)]: {\n            command: value,\n            confirmations: [\n              {\n                event: `${constants.COMMANDS.NOTICE}/${\n                  constants.NOTICE_MESSAGE_IDS.EMOTE_ONLY_ON\n                }`,\n              },\n              {\n                event: `${constants.COMMANDS.NOTICE}/${\n                  constants.NOTICE_MESSAGE_IDS.ALREADY_EMOTE_ONLY_ON\n                }`,\n              },\n            ],\n          },\n        }\n      case constants.CHAT_COMMANDS.EMOTE_ONLY_OFF:\n        return {\n          ...commands,\n          [camelCase(key)]: {\n            command: value,\n            confirmations: [\n              {\n                event: `${constants.COMMANDS.NOTICE}/${\n                  constants.NOTICE_MESSAGE_IDS.EMOTE_ONLY_OFF\n                }`,\n              },\n              {\n                event: `${constants.COMMANDS.NOTICE}/${\n                  constants.NOTICE_MESSAGE_IDS.ALREADY_EMOTE_ONLY_OFF\n                }`,\n              },\n            ],\n          },\n        }\n      case constants.CHAT_COMMANDS.MODS:\n        return {\n          ...commands,\n          [camelCase(key)]: {\n            command: value,\n            confirmations: [\n              {\n                event: `${constants.COMMANDS.NOTICE}/${\n                  constants.EVENTS.ROOM_MODS\n                }`,\n              },\n            ],\n          },\n        }\n      case constants.CHAT_COMMANDS.ME:\n      case constants.CHAT_COMMANDS.CLEAR:\n      case constants.CHAT_COMMANDS.COLOR:\n      case constants.CHAT_COMMANDS.COMMERCIAL:\n      case constants.CHAT_COMMANDS.FOLLOWERS_ONLY:\n      case constants.CHAT_COMMANDS.FOLLOWERS_ONLY_OFF:\n      case constants.CHAT_COMMANDS.HOST:\n      case constants.CHAT_COMMANDS.MOD:\n      case constants.CHAT_COMMANDS.PART:\n      case constants.CHAT_COMMANDS.R9K:\n      case constants.CHAT_COMMANDS.R9K_OFF:\n      case constants.CHAT_COMMANDS.SLOW:\n      case constants.CHAT_COMMANDS.SLOW_OFF:\n      case constants.CHAT_COMMANDS.SUBSCRIBERS:\n      case constants.CHAT_COMMANDS.SUBSCRIBERS_OFF:\n      case constants.CHAT_COMMANDS.TIMEOUT:\n      case constants.CHAT_COMMANDS.UNBAN:\n      case constants.CHAT_COMMANDS.UNHOST:\n      case constants.CHAT_COMMANDS.UNMOD:\n      case constants.CHAT_COMMANDS.WHISPER:\n      default:\n        return {\n          ...commands,\n          [camelCase(key)]: {\n            command: value,\n            confirmations: [],\n          },\n        }\n    }\n  },\n  {},\n)\n\nexport { commandCreator, commandsFactory }\n"]}