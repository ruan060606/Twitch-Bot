'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.commandsFactory = exports.commandCreator = undefined;

var _gt2 = require('lodash/gt');

var _gt3 = _interopRequireDefault(_gt2);

var _camelCase2 = require('lodash/camelCase');

var _camelCase3 = _interopRequireDefault(_camelCase2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _utils = require('../../utils');

var utils = _interopRequireWildcard(_utils);

var _constants = require('../constants');

var constants = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function commandCreator(_ref) {
  var _this = this;

  var command = _ref.command,
      timeout = _ref.timeout,
      _ref$confirmations = _ref.confirmations,
      confirmations = _ref$confirmations === undefined ? [] : _ref$confirmations;

  return function (channel) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var timeoutDelay = (0, _gt3.default)(timeout, 0) || confirmations.length ? utils.delayReject(timeout || constants.COMMAND_TIMEOUT, constants.ERROR_COMMAND_TIMED_OUT) : Promise.resolve();

    var unrecognized = new Promise(function (resolve, reject) {
      _this.once(constants.NOTICE_MESSAGE_IDS.UNRECOGNIZED_COMMAND, function () {
        reject(constants.ERROR_COMMAND_UNRECOGNIZED);
      });
    });

    var confirmation = Promise.race(confirmations.map(function (_ref2) {
      var event = _ref2.event,
          cb = _ref2.cb;
      return new Promise(function (resolve, reject) {
        _this.once(event, function (message) {
          if (typeof cb !== 'function') {
            return resolve(message);
          }

          var result = cb.apply(undefined, [message, command].concat(args));
          return result === true ? resolve(message) : reject(result);
        });
      });
    }));

    var message = '/' + command + ' ' + args.join(' ');
    _this.say(channel, message);

    return Promise.race([timeoutDelay, unrecognized, confirmation]);
  };
}

function commandsFactory() {
  var _this2 = this;

  return Object.entries(commandMap).reduce(function (commands, _ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        command = _ref4[0],
        commandCreatorArgs = _ref4[1];

    return _extends({}, commands, _defineProperty({}, command, commandCreator.call(_this2, _extends({}, commandCreatorArgs))));
  }, {});
}

var commandMap = Object.entries(constants.CHAT_COMMANDS).reduce(function (commands, _ref5) {
  var _ref6 = _slicedToArray(_ref5, 2),
      key = _ref6[0],
      value = _ref6[1];

  switch (value) {
    case constants.CHAT_COMMANDS.BAN:
      return _extends({}, commands, _defineProperty({}, (0, _camelCase3.default)(key), {
        command: value,
        confirmations: [{
          event: constants.COMMANDS.NOTICE + '/' + constants.NOTICE_MESSAGE_IDS.BAN_SUCCESS
        }, {
          event: constants.COMMANDS.NOTICE + '/' + constants.NOTICE_MESSAGE_IDS.ALREADY_BANNED
        }]
      }));
    case constants.CHAT_COMMANDS.EMOTE_ONLY:
      return _extends({}, commands, _defineProperty({}, (0, _camelCase3.default)(key), {
        command: value,
        confirmations: [{
          event: constants.COMMANDS.NOTICE + '/' + constants.NOTICE_MESSAGE_IDS.EMOTE_ONLY_ON
        }, {
          event: constants.COMMANDS.NOTICE + '/' + constants.NOTICE_MESSAGE_IDS.ALREADY_EMOTE_ONLY_ON
        }]
      }));
    case constants.CHAT_COMMANDS.EMOTE_ONLY_OFF:
      return _extends({}, commands, _defineProperty({}, (0, _camelCase3.default)(key), {
        command: value,
        confirmations: [{
          event: constants.COMMANDS.NOTICE + '/' + constants.NOTICE_MESSAGE_IDS.EMOTE_ONLY_OFF
        }, {
          event: constants.COMMANDS.NOTICE + '/' + constants.NOTICE_MESSAGE_IDS.ALREADY_EMOTE_ONLY_OFF
        }]
      }));
    case constants.CHAT_COMMANDS.MODS:
      return _extends({}, commands, _defineProperty({}, (0, _camelCase3.default)(key), {
        command: value,
        confirmations: [{
          event: constants.COMMANDS.NOTICE + '/' + constants.EVENTS.ROOM_MODS
        }]
      }));
    case constants.CHAT_COMMANDS.ME:
    case constants.CHAT_COMMANDS.CLEAR:
    case constants.CHAT_COMMANDS.COLOR:
    case constants.CHAT_COMMANDS.COMMERCIAL:
    case constants.CHAT_COMMANDS.FOLLOWERS_ONLY:
    case constants.CHAT_COMMANDS.FOLLOWERS_ONLY_OFF:
    case constants.CHAT_COMMANDS.HOST:
    case constants.CHAT_COMMANDS.MOD:
    case constants.CHAT_COMMANDS.PART:
    case constants.CHAT_COMMANDS.R9K:
    case constants.CHAT_COMMANDS.R9K_OFF:
    case constants.CHAT_COMMANDS.SLOW:
    case constants.CHAT_COMMANDS.SLOW_OFF:
    case constants.CHAT_COMMANDS.SUBSCRIBERS:
    case constants.CHAT_COMMANDS.SUBSCRIBERS_OFF:
    case constants.CHAT_COMMANDS.TIMEOUT:
    case constants.CHAT_COMMANDS.UNBAN:
    case constants.CHAT_COMMANDS.UNHOST:
    case constants.CHAT_COMMANDS.UNMOD:
    case constants.CHAT_COMMANDS.WHISPER:
    default:
      return _extends({}, commands, _defineProperty({}, (0, _camelCase3.default)(key), {
        command: value,
        confirmations: []
      }));
  }
}, {});

exports.commandCreator = commandCreator;
exports.commandsFactory = commandsFactory;
//# sourceMappingURL=commands.js.map