'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.userState = exports.userNotice = exports.roomState = exports.privateMessage = exports.globalUserState = exports.clearChat = undefined;

var _toLower2 = require('lodash/toLower');

var _toLower3 = _interopRequireDefault(_toLower2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _types = require('./types');

var types = _interopRequireWildcard(_types);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * CLEARCHAT tags
 * @typedef {Object} ClearChatTags
 * @property {string} [banReason]
 * @property {number} [banDuration]
 * @see https://dev.twitch.tv/docs/irc/tags#clearchat-twitch-tags
 */
var clearChat = function clearChat(tags) {
  return _extends({}, tags, {
    banReason: types.generalString(tags.banReason),
    banDuration: types.generalNumber(tags.banDuration)
  });
};

/**
 * GLOBALUSERSTATE tags
 * @typedef {Object} GlobalUserStateTags
 * @property {Array<string>} emoteSets
 * @property {string} userType
 * @property {string} username
 * @property {boolean} isTurboSubscriber
 * @see https://dev.twitch.tv/docs/irc/tags#globaluserstate-twitch-tags
 */
var globalUserState = function globalUserState(tags) {
  return _extends({}, tags, {
    emoteSets: types.emoteSets(tags.emoteSets),
    userType: types.userType(tags.userType),
    username: (0, _toLower3.default)(tags.displayName),
    isTurboSubscriber: types.generalBoolean(tags.turbo)
  });
};

/** PRIVMSG tags
 * @typedef {UserStateTags} PrivateMessageTags
 * @see https://dev.twitch.tv/docs/irc/tags#privmsg-twitch-tags
 */
var privateMessage = function privateMessage() {
  return userState.apply(undefined, arguments);
};

/**
 * ROOMSTATE Tag
 * @typedef {Object} RoomStateTags
 * @property {string} broadcasterLanguage
 * @property {number} slowDelay
 * @property {boolean} isFollowersOnly
 * @property {boolean} isSubscribersOnly
 * @property {boolean} isEmoteOnly
 * @property {boolean} isR9kEnabled
 * @see https://dev.twitch.tv/docs/irc/tags#roomstate-twitch-tags
 */
var roomState = function roomState(tags) {
  return _extends({}, tags, {
    broadcasterLanguage: types.broadcasterLanguage(tags.broadcasterLang),
    slowDelay: parseInt(tags.slow, 10),
    isEmoteOnly: types.generalBoolean(tags.emoteOnly),
    isFollowersOnly: types.generalBoolean(tags.followersOnly),
    isR9kEnabled: types.generalBoolean(tags.r9k),
    isSubscribersOnly: types.generalBoolean(tags.subsOnly)
  });
};

/** USERNOTICE tags
 * @typedef {UserStateTags} UserNoticeTags
 * @see https://dev.twitch.tv/docs/irc/tags#usernotice-twitch-tags
 */
var userNotice = function userNotice() {
  return userState.apply(undefined, arguments);
};

/**
 * USERSTATE tags
 * @typedef {Object} UserStateTags
 * @property {BadgesTag} badges
 * @property {number} [bits]
 * @property {Object<number, EmoteTag>} emotes
 * @property {Array<string>} emoteSets
 * @property {boolean} isModerator
 * @property {boolean} isSubscriber
 * @property {boolean} isTurboSubscriber
 * @see https://dev.twitch.tv/docs/irc/tags#userstate-twitch-tags
 */
var userState = function userState(tags) {
  return _extends({}, tags, {
    badges: types.badges(tags.badges),
    bits: types.generalNumber(tags.bits),
    emotes: types.emotes(tags.emotes),
    emoteSets: types.emoteSets(tags.emoteSets),
    userType: types.userType(tags.userType),
    isModerator: types.generalBoolean(tags.mod),
    isSubscriber: types.generalBoolean(tags.subscriber),
    isTurboSubscriber: types.generalBoolean(tags.turbo)
  });
};

exports.clearChat = clearChat;
exports.globalUserState = globalUserState;
exports.privateMessage = privateMessage;
exports.roomState = roomState;
exports.userNotice = userNotice;
exports.userState = userState;
//# sourceMappingURL=tags.js.map