{"version":3,"sources":["../../../../src/Chat/utils/parsers/index.js"],"names":["constants","typeParsers","tagParsers","base","rawMessagesV","rawMessages","replace","split","map","rawMessage","raw","tags","command","params","channel","message","_raw","timestamp","generalTimestamp","parseInt","undefined","joinOrPartMessage","exec","baseMessage","username","modeMessage","mode","isModerator","event","EVENTS","MOD_GAINED","MOD_LOST","namesMessage","names","namesV","NAMES","usernames","listType","length","namesEndMessage","NAMES_END","globalUserStateMessage","other","globalUserState","clearChatMessage","banReason","generalString","banDuration","generalNumber","USER_BANNED","hostTargetMessage","numberOfViewers","isStopped","NOTICE_MESSAGE_IDS","HOST_OFF","HOST_ON","roomStateMessage","roomState","noticeMessage","msgId","ROOM_MODS","mods","userStateMessage","userState","cheerEvent","bits","privateMessage","userNoticeMessage","userNotice","USER_NOTICE_MESSAGE_IDS","SUBSCRIPTION","systemMessage","systemMsg","months","msgParamMonths","subPlan","msgParamSubPlan","subPlanName","msgParamSubPlanName","RESUBSCRIPTION","SUBSCRIPTION_GIFT","recipientDisplayName","msgParamRecipientDisplayName","recipientId","msgParamRecipientId","recipientUserName","msgParamRecipientName","RAID","raiderDisplayName","msgParamDisplayName","raiderUserName","msgParamLogin","raiderViewerCount","msgParamViewerCount","RITUAL","ritualName","msgParamRitualName"],"mappings":"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","file":"index.js","sourcesContent":["import { parse } from 'irc-message'\nimport camelcaseKeys from 'camelcase-keys'\n\nimport { isEmpty, isFinite, toNumber, toUpper } from 'lodash'\n\nimport * as constants from '../../constants'\nimport * as typeParsers from './types'\nimport * as tagParsers from './tags'\n\nconst base = rawMessages => {\n  const rawMessagesV = rawMessages.replace(/\\r\\n$/, '').split(/\\n/g)\n\n  return rawMessagesV.map(rawMessage => {\n    const { raw, tags, command, params: [channel, message] } = parse(rawMessage)\n\n    /**\n     * Base message parsed from Twitch\n     * @mixin BaseMessage\n     * @property {string} _raw Un-parsed message\n     * @property {Date} timestamp Timestamp\n     * @property {string} command Command\n     * @property {(ClearChatTags|GlobalUserStateTags|PrivateMessageTags|RoomStateTags|UserNoticeTags|UserStateTags)} tags Twitch tags\n     * @property {string} [channel] Channel\n     * @property {string} [message] Message\n     * @property {string} [event] Associated event\n     */\n    return {\n      _raw: raw,\n      timestamp: typeParsers.generalTimestamp(\n        parseInt(tags['tmi-sent-ts'], 10),\n      ),\n      command,\n      channel,\n      tags: isEmpty(tags) ? undefined : camelcaseKeys(tags),\n      message,\n    }\n  })\n}\n\nconst joinOrPartMessage = baseMessage => {\n  const [\n    ,\n    username,\n    ,\n    ,\n    command,\n    channel,\n  ] = /:(.+)!(.+)@(.+).tmi.twitch.tv (JOIN|PART) (#.+)/g.exec(baseMessage._raw)\n\n  /**\n   * Join a channel.\n   * @event Chat#JOIN\n   * @mixes BaseMessage JoinOrPartMessage\n   * @property {string} username Username (lower-case)\n   * @see https://dev.twitch.tv/docs/irc/membership/#join-twitch-membership\n   */\n  /**\n   * Depart from a channel.\n   * @event Chat#PART\n   * @mixes BaseMessage JoinOrPartMessage\n   * @property {string} username Username (lower-case)\n   * @see https://dev.twitch.tv/docs/irc/membership/#part-twitch-membership\n   */\n  return {\n    ...baseMessage,\n    channel,\n    command,\n    username,\n    message: undefined,\n  }\n}\n\nconst modeMessage = baseMessage => {\n  const [\n    ,\n    channel,\n    mode,\n    username,\n  ] = /:[^\\s]+ MODE (#[^\\s]+) (-|\\+)o ([^\\s]+)/g.exec(baseMessage._raw)\n\n  const isModerator = mode === '+'\n\n  /**\n   * Gain/lose moderator (operator) status in a channel.\n   * @event Chat#MODE\n   * @mixes BaseMessage ModeMessage\n   * @property {string} event\n   * @property {string} username\n   * @property {boolean} isModerator\n   * @see https://dev.twitch.tv/docs/irc/membership/#mode-twitch-membership\n   */\n  return {\n    ...baseMessage,\n    event: isModerator\n      ? constants.EVENTS.MOD_GAINED\n      : constants.EVENTS.MOD_LOST,\n    channel,\n    username,\n    message: undefined,\n    isModerator,\n  }\n}\n\nconst namesMessage = baseMessage => {\n  const [\n    ,\n    ,\n    ,\n    channel,\n    names,\n  ] = /:(.+).tmi.twitch.tv 353 (.+) = (#.+) :(.+)/g.exec(baseMessage._raw)\n\n  const namesV = names.split(' ')\n\n  /**\n   * List current chatters in a channel.\n   * @event Chat#NAMES\n   * @mixes BaseMessage NamesMessage\n   * @property {Array<string>} usernames Array of usernames present in channel\n   * @property {('mods'|'chatters')} listType\n   * @see https://dev.twitch.tv/docs/irc/membership/#names-twitch-membership\n   */\n  return {\n    ...baseMessage,\n    channel,\n    event: constants.EVENTS.NAMES,\n    usernames: namesV,\n    listType: names.length > 1000 ? 'mods' : 'chatters',\n    message: undefined,\n  }\n}\n\nconst namesEndMessage = baseMessage => {\n  const [\n    ,\n    username,\n    ,\n    channel,\n    message,\n  ] = /:(.+).tmi.twitch.tv 366 (.+) (#.+) :(.+)/g.exec(baseMessage._raw)\n\n  /**\n   * End of list current chatters in a channel.\n   * @event Chat#NAMES_END\n   * @mixes BaseMessage NamesEndMessage\n   * @see https://dev.twitch.tv/docs/irc/membership/#names-twitch-membership\n   */\n  return {\n    ...baseMessage,\n    channel,\n    event: constants.EVENTS.NAMES_END,\n    username,\n    message,\n  }\n}\n\nconst globalUserStateMessage = baseMessage => {\n  const { tags, ...other } = baseMessage\n\n  /**\n   * GLOBALUSERSTATE message\n   * @mixin GlobalUserStateMessage\n   * @mixes BaseMessage\n   * @property {GlobalUserStateTags} tags\n   */\n  /**\n   * On successful login.\n   * @event Chat#GLOBALUSERSTATE\n   * @mixes GlobalUserStateMessage\n   */\n  return {\n    tags: tagParsers.globalUserState(tags),\n    ...other,\n  }\n}\n\nconst clearChatMessage = baseMessage => {\n  const { tags, message: username, ...other } = baseMessage\n\n  if (typeof username !== 'undefined') {\n    /**\n     * Temporary or permanent ban on a channel.\n     * @event Chat#CLEARCHAT/USER_BANNED\n     * @mixes BaseMessage ClearChatUserBannedMessage\n     * @property {ClearChatTags} tags\n     * @property {string} username\n     * @see https://dev.twitch.tv/docs/irc/commands/#clearchat-twitch-commands\n     * @see https://dev.twitch.tv/docs/irc/tags/#clearchat-twitch-tags\n     */\n    return {\n      ...other,\n      tags: {\n        ...tags,\n        banReason: typeParsers.generalString(tags.banReason),\n        banDuration: typeParsers.generalNumber(tags.banDuration),\n      },\n      event: constants.EVENTS.USER_BANNED,\n      username,\n    }\n  }\n\n  /**\n   * All chat is cleared (deleted).\n   * @event Chat#CLEARCHAT\n   * @mixes BaseMessage ClearChatMessage\n   * @see https://dev.twitch.tv/docs/irc/commands/#clearchat-twitch-commands\n   * @see https://dev.twitch.tv/docs/irc/tags/#clearchat-twitch-tags\n   */\n  return {\n    ...other,\n  }\n}\n\nconst hostTargetMessage = baseMessage => {\n  const [\n    ,\n    channel,\n    username,\n    numberOfViewers,\n  ] = /:tmi.twitch.tv HOSTTARGET (#[^\\s]+) :([^\\s]+)?\\s?(\\d+)?/g.exec(\n    baseMessage._raw,\n  )\n  const isStopped = username === '-'\n\n  /**\n   * Host starts or stops a message.\n   * @event Chat#HOSTTARGET\n   * @mixes BaseMessage HostTargetMessage\n   * @property {number} [numberOfViewers] Number of viewers\n   * @see https://dev.twitch.tv/docs/irc/commands/#hosttarget-twitch-commands\n   */\n  return {\n    ...baseMessage,\n    channel,\n    username,\n    event: toUpper(\n      isStopped\n        ? constants.NOTICE_MESSAGE_IDS.HOST_OFF\n        : constants.NOTICE_MESSAGE_IDS.HOST_ON,\n    ),\n    numberOfViewers: isFinite(toNumber(numberOfViewers))\n      ? parseInt(numberOfViewers, 10)\n      : undefined,\n    message: undefined,\n  }\n}\n\nconst roomStateMessage = baseMessage => {\n  const { tags, ...other } = baseMessage\n\n  /**\n   * When a user joins a channel or a room setting is changed.\n   * @event Chat#ROOMSTATE\n   * @mixes BaseMessage RoomStateMessage\n   * @property {RoomStateTags} tags\n   */\n  return {\n    tags: tagParsers.roomState(tags),\n    ...other,\n  }\n}\n\nconst noticeMessage = baseMessage => {\n  const { tags, ...other } = baseMessage\n\n  const event = toUpper(tags.msgId)\n\n  switch (tags.msgId) {\n    case constants.NOTICE_MESSAGE_IDS.ROOM_MODS:\n      /**\n       * NOTICE/ROOM_MODS message\n       * @event Chat#NOTICE/ROOM_MODS\n       * @mixes NoticeMessage NoticeMessage\n       * @property {'ROOM_MODS'} event\n       * @property {Array<string>} mods\n       */\n      return { event, tags, mods: typeParsers.mods(other.message), ...other }\n    default:\n      /**\n       * @event Chat#NOTICE\n       * @mixes NoticeMessage\n       * @property {string} event `msg-id` tag (snake uppercase)\n       * @property {Object} tags\n       * @see https://dev.twitch.tv/docs/irc/commands/#msg-id-tags-for-the-notice-commands-capability\n       */\n\n      /**\n       * NOTICE message\n       * @mixin NoticeMessage\n       * @property {string} event `msg-id` tag (snake uppercase)\n       * @property {Object} tags\n       */\n      return { event, tags, ...other }\n  }\n}\n\nconst userStateMessage = baseMessage => {\n  const { tags, ...other } = baseMessage\n\n  /**\n   * USERSTATE message\n   * @mixin UserStateMessage\n   * @mixes BaseMessage\n   * @property {UserStateTags} tags\n   */\n  /**\n   * When a user joins a channel or sends a PRIVMSG to a channel.\n   * @event Chat#USERSTATE\n   * @mixes UserStateMessage UserStateMessage\n   */\n  return {\n    tags: tagParsers.userState(tags),\n    ...other,\n    ...typeParsers.cheerEvent(tags.bits),\n  }\n}\n\n/**\n * When a user joins a channel or sends a PRIVMSG to a channel.\n * @event Chat#PRIVMSG\n * @mixes UserStateMessage PrivateMessage\n * @property {'CHEER'} [event]\n * @property {string} [event]\n * @property {number} [bits]\n */\nconst privateMessage = userStateMessage\n\nconst userNoticeMessage = baseMessage => {\n  const tags = tagParsers.userNotice(baseMessage.tags)\n\n  switch (tags.msgId) {\n    case constants.USER_NOTICE_MESSAGE_IDS.SUBSCRIPTION:\n      /**\n       * On subscription (first month) to a channel.\n       * @event Chat#USERNOTICE/SUBSCRIPTION\n       * @mixes UserStateMessage UserNoticeSubscriptionMessage\n       * @property {'SUBSCRIPTION'} event\n       * @property {string} systemMessage\n       * @property {string} months\n       * @property {string} subPlan\n       * @property {string} subPlanName\n       */\n      return {\n        ...baseMessage,\n        tags,\n        event: constants.EVENTS.SUBSCRIPTION,\n        systemMessage: typeParsers.generalString(tags.systemMsg),\n        months: tags.msgParamMonths,\n        subPlan: tags.msgParamSubPlan,\n        subPlanName: typeParsers.generalString(tags.msgParamSubPlanName),\n      }\n    case constants.USER_NOTICE_MESSAGE_IDS.RESUBSCRIPTION:\n      /**\n       * On resubscription (subsequent months) to a channel.\n       * @event Chat#USERNOTICE/RESUBSCRIPTION\n       * @mixes UserNoticeSubscriptionMessage UserNoticeResubscriptionMessage\n       * @property {'RESUBSCRIPTION'} event\n       */\n      return {\n        ...baseMessage,\n        tags,\n        event: constants.EVENTS.RESUBSCRIPTION,\n        systemMessage: typeParsers.generalString(tags.systemMsg),\n        months: tags.msgParamMonths,\n        subPlan: tags.msgParamSubPlan,\n        subPlanName: typeParsers.generalString(tags.msgParamSubPlanName),\n      }\n    case constants.USER_NOTICE_MESSAGE_IDS.SUBSCRIPTION_GIFT:\n      /**\n       * On subscription gift to a channel.\n       * @event Chat#USERNOTICE/SUBSCRIPTION_GIFT\n       * @mixes UserStateMessage UserNoticeSubscriptionGiftMessage\n       * @property {'SUBSCRIPTION_GIFT'} event\n       * @property {string} systemMessage\n       * @property {string} recipientDisplayName\n       * @property {string} recipientId\n       * @property {string} recipientUserName\n       */\n      return {\n        ...baseMessage,\n        tags,\n        event: constants.EVENTS.SUBSCRIPTION_GIFT,\n        systemMessage: typeParsers.generalString(tags.systemMsg),\n        recipientDisplayName: tags.msgParamRecipientDisplayName,\n        recipientId: tags.msgParamRecipientId,\n        recipientUserName: tags.msgParamRecipientName,\n      }\n    case constants.USER_NOTICE_MESSAGE_IDS.RAID:\n      /**\n       * On channel raid.\n       * @event Chat#USERNOTICE/RAID\n       * @mixes UserStateMessage UserNoticeRaidMessage\n       * @property {'RAID'} event\n       * @property {string} systemMessage\n       * @property {string} raiderDisplayName\n       * @property {string} raiderUserName\n       * @property {string} raiderViewerCount\n       */\n      return {\n        ...baseMessage,\n        tags,\n        event: constants.EVENTS.RAID,\n        systemMessage: typeParsers.generalString(tags.systemMsg),\n        raiderDisplayName: tags.msgParamDisplayName,\n        raiderUserName: tags.msgParamLogin,\n        raiderViewerCount: tags.msgParamViewerCount,\n      }\n    case constants.USER_NOTICE_MESSAGE_IDS.RITUAL:\n      /**\n       * On channel ritual.\n       * @event Chat#USERNOTICE/RITUAL\n       * @mixes UserStateMessage UserNoticeRitualMessage\n       * @property {'RITUAL'} event\n       * @property {string} systemMessage\n       * @property {string} ritualName\n       */\n      return {\n        ...baseMessage,\n        tags,\n        event: constants.EVENTS.RITUAL,\n        systemMessage: typeParsers.generalString(tags.systemMsg),\n        ritualName: tags.msgParamRitualName,\n      }\n    default:\n      return { ...baseMessage, tags }\n  }\n}\n\nexport {\n  modeMessage,\n  hostTargetMessage,\n  joinOrPartMessage,\n  namesMessage,\n  namesEndMessage,\n  clearChatMessage,\n  globalUserStateMessage,\n  userStateMessage,\n  roomStateMessage,\n  noticeMessage,\n  userNoticeMessage,\n  privateMessage,\n}\nexport default base\n"]}