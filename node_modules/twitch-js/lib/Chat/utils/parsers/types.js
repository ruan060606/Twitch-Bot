'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mods = exports.cheerEvent = exports.emoteSets = exports.emotes = exports.badges = exports.broadcasterLanguage = exports.userType = exports.generalTimestamp = exports.generalBoolean = exports.generalNumber = exports.generalString = undefined;

var _replace2 = require('lodash/replace');

var _replace3 = _interopRequireDefault(_replace2);

var _isFinite2 = require('lodash/isFinite');

var _isFinite3 = _interopRequireDefault(_isFinite2);

var _gt2 = require('lodash/gt');

var _gt3 = _interopRequireDefault(_gt2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var generalString = function generalString(maybeMessage) {
  return (0, _replace3.default)(maybeMessage, /\\s/g, ' ');
};

var generalNumber = function generalNumber(maybeNumber) {
  var number = parseInt(maybeNumber, 10);
  return (0, _isFinite3.default)(number) ? number : undefined;
};

var generalBoolean = function generalBoolean(maybeBoolean) {
  return maybeBoolean === '1';
};

var generalTimestamp = function generalTimestamp(maybeTimestamp) {
  var timestamp = new Date(parseInt(maybeTimestamp, 10));
  return timestamp.toString() !== 'Invalid Date' ? timestamp : new Date();
};

var userType = function userType(maybeUserType) {
  return typeof maybeUserType === 'string' ? maybeUserType : undefined;
};

var broadcasterLanguage = function broadcasterLanguage(maybeLanguage) {
  return typeof maybeLanguage === 'string' ? maybeLanguage : undefined;
};

var badges = function badges(maybeBadges) {
  /**
   * Badges tag
   * @typedef {Object} BadgesTag
   * @property {boolean} [admin]
   * @property {number} [bits]
   * @property {boolean} [broadcaster]
   * @property {boolean} [globalMod]
   * @property {boolean} [moderator]
   * @property {boolean} [subscriber]
   * @property {boolean} [staff]
   * @property {boolean} [turbo]
   * @see https://dev.twitch.tv/docs/irc/tags/#privmsg-twitch-tags
   */
  return typeof maybeBadges === 'string' ? maybeBadges.split(',').reduce(function (parsed, badge) {
    var _badge$split = badge.split('/'),
        _badge$split2 = _slicedToArray(_badge$split, 2),
        key = _badge$split2[0],
        value = _badge$split2[1];

    return _extends({}, parsed, _defineProperty({}, key, parseInt(value, 10)));
  }, {}) : {};
};

var emotes = function emotes(maybeEmotes) {
  /**
   * Emote tag
   * @typedef {Object} EmoteTag
   * @property {number} start
   * @property {number} end
   * @see https://dev.twitch.tv/docs/irc/tags/#privmsg-twitch-tags
   */
  return typeof maybeEmotes === 'string' ? maybeEmotes.split('/').reduce(function (parsed, emote) {
    var _emote$split = emote.split(':'),
        _emote$split2 = _slicedToArray(_emote$split, 2),
        key = _emote$split2[0],
        value = _emote$split2[1];

    var _value$split = value.split('-'),
        _value$split2 = _slicedToArray(_value$split, 2),
        start = _value$split2[0],
        end = _value$split2[1];

    return _extends({}, parsed, _defineProperty({}, key, { start: parseInt(start, 10), end: parseInt(end, 10) }));
  }, {}) : {};
};

var emoteSets = function emoteSets(maybeEmoteSets) {
  return typeof maybeEmoteSets === 'string' ? maybeEmoteSets.split(',') : undefined;
};

var cheerEvent = function cheerEvent(maybeBits) {
  return (0, _gt3.default)(maybeBits, 0) ? { event: 'CHEER', bits: parseInt(maybeBits, 10) } : {};
};

var mods = function mods(message) {
  var _message$split = message.split(': '),
      _message$split2 = _slicedToArray(_message$split, 2),
      modList = _message$split2[1];

  return modList.split(', ');
};

exports.generalString = generalString;
exports.generalNumber = generalNumber;
exports.generalBoolean = generalBoolean;
exports.generalTimestamp = generalTimestamp;
exports.userType = userType;
exports.broadcasterLanguage = broadcasterLanguage;
exports.badges = badges;
exports.emotes = emotes;
exports.emoteSets = emoteSets;
exports.cheerEvent = cheerEvent;
exports.mods = mods;
//# sourceMappingURL=types.js.map