{"version":3,"sources":["../../../../src/Chat/utils/parsers/types.js"],"names":["generalString","maybeMessage","generalNumber","number","parseInt","maybeNumber","undefined","generalBoolean","maybeBoolean","generalTimestamp","timestamp","Date","maybeTimestamp","toString","userType","maybeUserType","broadcasterLanguage","maybeLanguage","badges","maybeBadges","split","reduce","parsed","badge","key","value","emotes","maybeEmotes","emote","start","end","emoteSets","maybeEmoteSets","cheerEvent","maybeBits","event","bits","mods","message","modList"],"mappings":"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","file":"types.js","sourcesContent":["import { gt, isFinite, replace } from 'lodash'\n\nconst generalString = maybeMessage => replace(maybeMessage, /\\\\s/g, ' ')\n\nconst generalNumber = maybeNumber => {\n  const number = parseInt(maybeNumber, 10)\n  return isFinite(number) ? number : undefined\n}\n\nconst generalBoolean = maybeBoolean => maybeBoolean === '1'\n\nconst generalTimestamp = maybeTimestamp => {\n  const timestamp = new Date(parseInt(maybeTimestamp, 10))\n  return timestamp.toString() !== 'Invalid Date' ? timestamp : new Date()\n}\n\nconst userType = maybeUserType => {\n  return typeof maybeUserType === 'string' ? maybeUserType : undefined\n}\n\nconst broadcasterLanguage = maybeLanguage => {\n  return typeof maybeLanguage === 'string' ? maybeLanguage : undefined\n}\n\nconst badges = maybeBadges => {\n  /**\n   * Badges tag\n   * @typedef {Object} BadgesTag\n   * @property {boolean} [admin]\n   * @property {number} [bits]\n   * @property {boolean} [broadcaster]\n   * @property {boolean} [globalMod]\n   * @property {boolean} [moderator]\n   * @property {boolean} [subscriber]\n   * @property {boolean} [staff]\n   * @property {boolean} [turbo]\n   * @see https://dev.twitch.tv/docs/irc/tags/#privmsg-twitch-tags\n   */\n  return typeof maybeBadges === 'string'\n    ? maybeBadges.split(',').reduce((parsed, badge) => {\n        const [key, value] = badge.split('/')\n        return { ...parsed, [key]: parseInt(value, 10) }\n      }, {})\n    : {}\n}\n\nconst emotes = maybeEmotes => {\n  /**\n   * Emote tag\n   * @typedef {Object} EmoteTag\n   * @property {number} start\n   * @property {number} end\n   * @see https://dev.twitch.tv/docs/irc/tags/#privmsg-twitch-tags\n   */\n  return typeof maybeEmotes === 'string'\n    ? maybeEmotes.split('/').reduce((parsed, emote) => {\n        const [key, value] = emote.split(':')\n        const [start, end] = value.split('-')\n        return {\n          ...parsed,\n          [key]: { start: parseInt(start, 10), end: parseInt(end, 10) },\n        }\n      }, {})\n    : {}\n}\n\nconst emoteSets = maybeEmoteSets => {\n  return typeof maybeEmoteSets === 'string'\n    ? maybeEmoteSets.split(',')\n    : undefined\n}\n\nconst cheerEvent = maybeBits => {\n  return gt(maybeBits, 0)\n    ? { event: 'CHEER', bits: parseInt(maybeBits, 10) }\n    : {}\n}\n\nconst mods = message => {\n  const [, modList] = message.split(': ')\n  return modList.split(', ')\n}\n\nexport {\n  generalString,\n  generalNumber,\n  generalBoolean,\n  generalTimestamp,\n  userType,\n  broadcasterLanguage,\n  badges,\n  emotes,\n  emoteSets,\n  cheerEvent,\n  mods,\n}\n"]}