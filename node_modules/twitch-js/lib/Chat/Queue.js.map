{"version":3,"sources":["../../src/Chat/Queue.js"],"names":["constants","Queue","cb","fn","rateLimiter","store","priority","precondition","preconditionRetryTimeout","QUEUE_TICK_RATE","rateLimiterIntervalId","setInterval","burnDownRateLimiter","weight","Math","max","on","incrementRateLimiter"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;IAAYA,S;;;;;;;;;;;;IAENC,K;;;AAIJ,mBAAc;AAAA;;AAgBZ;AAhBY,8GAGV,gBAASC,EAAT,EAAgB;AAAA,UAAbC,EAAa,QAAbA,EAAa;;AACdA;AACAD,SAAG,MAAKE,WAAR;AACD,KANS,EAOV;AACEC,aAAO,iCADT;AAEEC,gBAAU,yBAAmBJ,EAAnB;AAAA,mCAAGI,QAAH;AAAA,YAAGA,SAAH,kCAAc,CAAd;;AAAA,eAA0BJ,GAAG,IAAH,EAASI,SAAT,CAA1B;AAAA,OAFZ;AAGE;AACAC,oBAAc;AAAA,eAAML,GAAG,IAAH,EAAS,MAAKE,WAAL,GAAmB,CAA5B,CAAN;AAAA,OAJhB;AAKEI,gCAA0BR,UAAUS;AALtC,KAPU;AACZ;;;AADY,UAHdL,WAGc,GAHA,CAGA;AAiBZ,UAAKM,qBAAL,GAA6BC,YAC3B,MAAKC,mBADsB,EAE3BZ,UAAUS,eAFiB,CAA7B;AAjBY;AAqBb;;;;yCAEoBI,M,EAAQ;AAAA;;AAC3B,aAAO,YAAM;AACX,eAAKT,WAAL,GAAmB,OAAKA,WAAL,GAAmB,IAAIS,MAA1C;AACD,OAFD;AAGD;;;0CAEqB;AACpB,WAAKT,WAAL,GAAmBU,KAAKC,GAAL,CAAS,KAAKX,WAAL,GAAmB,CAA5B,EAA+B,CAA/B,CAAnB;AACD;;;gCAE8B;AAAA,UAAxBD,EAAwB,SAAxBA,EAAwB;AAAA,UAApBG,QAAoB,SAApBA,QAAoB;AAAA,UAAVO,MAAU,SAAVA,MAAU;;AAC7B,yGACQ,EAAEV,MAAF,EAAMG,kBAAN,EADR,EAEGU,EAFH,CAEM,UAFN,EAEkB,KAAKC,oBAAL,CAA0BJ,MAA1B,CAFlB;AAGD;;;;;;kBAGYZ,K","file":"Queue.js","sourcesContent":["import BetterQueue from 'better-queue'\nimport MemoryStore from 'better-queue-memory'\n\nimport * as constants from './constants'\n\nclass Queue extends BetterQueue {\n  rateLimiter = 0\n  rateLimiterIntervalId\n\n  constructor() {\n    // Instantiate Better Queue.\n    super(\n      ({ fn }, cb) => {\n        fn()\n        cb(this.rateLimiter)\n      },\n      {\n        store: new MemoryStore(),\n        priority: ({ priority = 1 }, cb) => cb(null, priority),\n        // Process queue only when rate-limiter is less than 1.\n        precondition: cb => cb(null, this.rateLimiter < 1),\n        preconditionRetryTimeout: constants.QUEUE_TICK_RATE,\n      },\n    )\n\n    // Start rate-limiter burn down.\n    this.rateLimiterIntervalId = setInterval(\n      this.burnDownRateLimiter,\n      constants.QUEUE_TICK_RATE,\n    )\n  }\n\n  incrementRateLimiter(weight) {\n    return () => {\n      this.rateLimiter = this.rateLimiter + 1 / weight\n    }\n  }\n\n  burnDownRateLimiter() {\n    this.rateLimiter = Math.max(this.rateLimiter - 1, 0)\n  }\n\n  push({ fn, priority, weight }) {\n    super\n      .push({ fn, priority })\n      .on('accepted', this.incrementRateLimiter(weight))\n  }\n}\n\nexport default Queue\n"]}