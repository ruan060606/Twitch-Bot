'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _betterQueue = require('better-queue');

var _betterQueue2 = _interopRequireDefault(_betterQueue);

var _betterQueueMemory = require('better-queue-memory');

var _betterQueueMemory2 = _interopRequireDefault(_betterQueueMemory);

var _constants = require('./constants');

var constants = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Queue = function (_BetterQueue) {
  _inherits(Queue, _BetterQueue);

  function Queue() {
    _classCallCheck(this, Queue);

    // Start rate-limiter burn down.
    var _this = _possibleConstructorReturn(this, (Queue.__proto__ || Object.getPrototypeOf(Queue)).call(this, function (_ref, cb) {
      var fn = _ref.fn;

      fn();
      cb(_this.rateLimiter);
    }, {
      store: new _betterQueueMemory2.default(),
      priority: function priority(_ref2, cb) {
        var _ref2$priority = _ref2.priority,
            _priority = _ref2$priority === undefined ? 1 : _ref2$priority;

        return cb(null, _priority);
      },
      // Process queue only when rate-limiter is less than 1.
      precondition: function precondition(cb) {
        return cb(null, _this.rateLimiter < 1);
      },
      preconditionRetryTimeout: constants.QUEUE_TICK_RATE
    }));
    // Instantiate Better Queue.


    _this.rateLimiter = 0;
    _this.rateLimiterIntervalId = setInterval(_this.burnDownRateLimiter, constants.QUEUE_TICK_RATE);
    return _this;
  }

  _createClass(Queue, [{
    key: 'incrementRateLimiter',
    value: function incrementRateLimiter(weight) {
      var _this2 = this;

      return function () {
        _this2.rateLimiter = _this2.rateLimiter + 1 / weight;
      };
    }
  }, {
    key: 'burnDownRateLimiter',
    value: function burnDownRateLimiter() {
      this.rateLimiter = Math.max(this.rateLimiter - 1, 0);
    }
  }, {
    key: 'push',
    value: function push(_ref3) {
      var fn = _ref3.fn,
          priority = _ref3.priority,
          weight = _ref3.weight;

      _get(Queue.prototype.__proto__ || Object.getPrototypeOf(Queue.prototype), 'push', this).call(this, { fn: fn, priority: priority }).on('accepted', this.incrementRateLimiter(weight));
    }
  }]);

  return Queue;
}(_betterQueue2.default);

exports.default = Queue;
//# sourceMappingURL=Queue.js.map