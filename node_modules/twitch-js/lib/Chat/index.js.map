{"version":3,"sources":["../../src/Chat/index.js"],"names":["utils","constants","parsers","sanitizers","validators","Chat","maybeOptions","readyState","userState","channels","options","chatOptions","connect","Promise","once","EVENTS","GLOBAL_USER_STATE","resolve","globalUserStateMessage","client","CONNECTED","Object","assign","call","send","bind","disconnect","on","ALL","handleMessage","DISCONNECTED","race","delayReject","connectionTimeout","ERROR_CONNECT_TIMED_OUT","message","removeAllListeners","maybeChannel","channel","roomState","onceResolve","COMMANDS","ROOM_STATE","USER_STATE","join","all","then","tags","response","JOIN","joinTimeout","ERROR_JOIN_TIMED_OUT","undefined","PART","say","PRIVATE_MESSAGE","ERROR_SAY_TIMED_OUT","keys","map","eventName","split","reduce","parents","current","eventPartial","baseMessage","displayName","messageDisplayName","isSelf","preMessage","command","joinOrPartMessage","emit","NAMES","namesMessage","NAMES_END","namesEndMessage","CLEAR_CHAT","clearChatMessage","event","HOST_TARGET","hostTargetMessage","MODE","modeMessage","username","isModerator","userStateMessage","roomStateMessage","NOTICE","noticeMessage","USER_NOTICE","userNoticeMessage","privateMessage"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * EventEmitter3 is a high performance EventEmitter\n * @external EventEmitter3\n * @see {@link https://github.com/primus/eventemitter3 EventEmitter3}\n */\nimport { EventEmitter } from 'eventemitter3'\n\nimport { get } from 'lodash'\n\nimport * as utils from '../utils'\n\nimport Client from './Client'\n\nimport * as constants from './constants'\nimport { commandsFactory } from './utils/commands'\nimport * as parsers from './utils/parsers'\nimport * as sanitizers from './utils/sanitizers'\nimport * as validators from './utils/validators'\n\n/**\n * Chat client\n * @extends external:EventEmitter3\n *\n * @emits Chat#*\n * @emits Chat#CLEARCHAT\n * @emits Chat#CLEARCHAT/USER_BANNED\n * @emits Chat#GLOBALUSERSTATE\n * @emits Chat#HOSTTARGET\n * @emits Chat#JOIN\n * @emits Chat#MODE\n * @emits Chat#NAMES\n * @emits Chat#NAMES_END\n * @emits Chat#NOTICE\n * @emits Chat#NOTICE/ROOM_MODS\n * @emits Chat#PART\n * @emits Chat#PRIVMSG\n * @emits Chat#ROOMSTATE\n * @emits Chat#USERNOTICE/RAID\n * @emits Chat#USERNOTICE/RESUBSCRIPTION\n * @emits Chat#USERNOTICE/RITUAL\n * @emits Chat#USERNOTICE/SUBSCRIPTION\n * @emits Chat#USERNOTICE/SUBSCRIPTION_GIFT\n * @emits Chat#USERSTATE\n *\n * @example <caption>Connecting to Twitch and joining #dallas</caption>\n * const token = 'cfabdegwdoklmawdzdo98xt2fo512y'\n * const username = 'ronni'\n * const channel = '#dallas'\n * const { chat } = new TwitchJs({ token, username })\n *\n * chat.connect().then(globalUserState => {\n *   // Listen to all messages\n *   chat.on('*', message => {\n *     // Do stuff with message ...\n *   })\n *\n *   // Listen to PRIVMSG\n *   chat.on('PRIVMSG', privateMessage => {\n *     // Do stuff with privateMessage ...\n *   })\n *\n *   // Do other stuff ...\n *\n *   chat.join(channel).then(channelState => {\n *     // Do stuff with channelState...\n *   })\n * })\n */\nclass Chat extends EventEmitter {\n  /**\n   * Chat client ready state: **0** not ready; **1** connecting; **2**\n   * connected **3**; disconnecting, or; **4** disconnected.\n   * @type {number}\n   */\n  readyState = 0\n\n  /** @type {GlobalUserStateTags} */\n  userState = {}\n\n  /** @type {Object.<string, ChannelState>} */\n  channels = {}\n\n  /**\n   * Chat constructor.\n   * @param {ChatOptions} options\n   */\n  constructor(maybeOptions) {\n    super()\n\n    /**\n     * Validated options.\n     * @type {ChatOptions}\n     */\n    this.options = validators.chatOptions(maybeOptions)\n  }\n\n  /**\n   * Connect to Twitch.\n   * @return {Promise<GlobalUserStateMessage, string>} Global user state message\n   */\n  connect() {\n    const connect = new Promise(resolve => {\n      if (this.readyState === 1) {\n        // Already trying to connect, so resolve when connected.\n        this.once(\n          constants.EVENTS.GLOBAL_USER_STATE,\n          globalUserStateMessage => {\n            resolve(globalUserStateMessage)\n          },\n        )\n      } else if (this.readyState === 2) {\n        // Already connected.\n        resolve(this.userState)\n      } else {\n        // Connect ...\n        this.readyState = 1\n\n        // Create client and connect.\n        const client = new Client(this.options)\n\n        // Once the client is connected ...\n        client.once(constants.EVENTS.CONNECTED, globalUserStateMessage => {\n          this.readyState = 2\n\n          // Create commands.\n          Object.assign(this, commandsFactory.call(this))\n\n          this.send = this.send.bind(this, client)\n          this.disconnect = this.disconnect.bind(this, client)\n\n          // Bind events.\n          client.on(constants.EVENTS.ALL, handleMessage, this)\n\n          // Listen for disconnect.\n          client.once(constants.EVENTS.DISCONNECTED, this.disconnect)\n\n          handleMessage.call(this, globalUserStateMessage)\n\n          // ... resolve.\n          resolve(globalUserStateMessage)\n        })\n      }\n    })\n\n    return Promise.race([\n      utils.delayReject(\n        this.options.connectionTimeout,\n        constants.ERROR_CONNECT_TIMED_OUT,\n      ),\n      connect,\n    ])\n  }\n\n  /**\n   * Sends a raw message to Twitch.\n   * @param {string} message - Message to send.\n   */\n  send(client, message) {\n    client.send(message)\n  }\n\n  /**\n   * Disconnect from Twitch.\n   */\n  disconnect(client) {\n    this.readyState = 3\n\n    client.removeAllListeners()\n\n    this.userState = {}\n    this.channels = {}\n\n    this.readyState = 4\n  }\n\n  /**\n   * Join a channel.\n   * @param {string} channel\n   * @return {Promise<ChannelState, string>}\n   *\n   * @example <caption>Joining #dallas</caption>\n   * const channel = '#dallas'\n   *\n   * chat.join(channel).then(channelState => {\n   *   // Do stuff with channelState...\n   * })\n   *\n   * @example <caption>Joining multiple channels</caption>\n   * const channels = ['#dallas', '#ronni']\n   *\n   * Promise.all(channels.map(channel => chat.join(channel)))\n   *   .then(channelStates => {\n   *     // Listen to all PRIVMSG\n   *     chat.on('PRIVMSG', privateMessage => {\n   *       // Do stuff with privateMessage ...\n   *     })\n   *\n   *     // Listen to PRIVMSG from #dallas ONLY\n   *     chat.on('PRIVMSG/#dallas', privateMessage => {\n   *       // Do stuff with privateMessage ...\n   *     })\n   *     // Listen to all PRIVMSG from #ronni ONLY\n   *     chat.on('PRIVMSG/#ronni', privateMessage => {\n   *       // Do stuff with privateMessage ...\n   *     })\n   *   })\n   */\n  join(maybeChannel) {\n    const channel = sanitizers.channel(maybeChannel)\n\n    const roomState = utils.onceResolve(\n      this,\n      `${constants.COMMANDS.ROOM_STATE}/${channel}`,\n    )\n\n    const userState = utils.onceResolve(\n      this,\n      `${constants.COMMANDS.USER_STATE}/${channel}`,\n    )\n\n    const join = Promise.all([this.connect, roomState, userState]).then(\n      ([, { channel, tags: roomState }, { tags: userState }]) => {\n        /**\n         * @typedef {Object} ChannelState\n         * Channel state information\n         * @property {RoomStateTags} roomState\n         * @property {UserStateTags} userState\n         */\n        const response = { roomState, userState }\n        this.channels[channel] = response\n        return response\n      },\n    )\n\n    this.send(`${constants.COMMANDS.JOIN} ${channel}`)\n\n    return Promise.race([\n      utils.delayReject(\n        this.options.joinTimeout,\n        constants.ERROR_JOIN_TIMED_OUT,\n      ),\n      join,\n    ])\n  }\n\n  /**\n   * Depart from a channel.\n   * @param {string} channel\n   */\n  part(maybeChannel) {\n    const channel = sanitizers.channel(maybeChannel)\n\n    this.channels[channel] = undefined\n    this.send(`${constants.COMMANDS.PART} ${channel}`)\n  }\n\n  /**\n   * Send a message to a channel.\n   * @param {string} channel\n   * @param {string} message\n   * @return {Promise<UserStateMessage, string>}\n   */\n  say(maybeChannel, message) {\n    const channel = sanitizers.channel(maybeChannel)\n\n    const userState = utils.onceResolve(\n      this,\n      `${constants.COMMANDS.USER_STATE}/${channel}`,\n    )\n\n    const say = Promise.all([this.connect, userState])\n\n    this.send(`${constants.COMMANDS.PRIVATE_MESSAGE} ${channel} :${message}`)\n\n    return Promise.race([\n      utils.delayReject(\n        this.options.joinTimeout,\n        constants.ERROR_SAY_TIMED_OUT,\n      ),\n      say,\n    ])\n  }\n\n  /**\n   * Broadcast message to all connected channels.\n   * @param {string} message\n   * @return {Promise<Array<UserStateMessage>>}\n   */\n  broadcast(message) {\n    return Promise.all(\n      Object.keys(this.channels).map(channel => this.say(channel, message)),\n    )\n  }\n\n  /** @private */\n  emit(eventName, message) {\n    eventName.split('/').reduce((parents, current) => {\n      const eventPartial = [...parents, current]\n      super.emit(eventPartial.join('/'), message)\n      return eventPartial\n    }, [])\n\n    /**\n     * All events are also emitted with this event name.\n     * @event Chat#*\n     */\n    super.emit(constants.EVENTS.ALL, message)\n  }\n}\n\nfunction handleMessage(baseMessage) {\n  const channel = sanitizers.channel(baseMessage.channel)\n\n  const displayName = get(\n    this.channels,\n    [channel, 'userState', 'displayName'],\n    '',\n  )\n  const messageDisplayName = get(baseMessage, 'state.displayName')\n  const isSelf = displayName === messageDisplayName\n\n  const preMessage = { ...baseMessage, isSelf }\n\n  switch (preMessage.command) {\n    case constants.EVENTS.JOIN: {\n      const message = parsers.joinOrPartMessage(preMessage)\n      this.emit(`${message.command}/${channel}`, message)\n      break\n    }\n    case constants.EVENTS.PART: {\n      const message = parsers.joinOrPartMessage(preMessage)\n      this.channels[message.channel] = undefined\n      this.emit(`${message.command}/${channel}`, message)\n      break\n    }\n    case constants.EVENTS.NAMES: {\n      const message = parsers.namesMessage(preMessage)\n      this.emit(`${message.command}/${channel}`, message)\n      break\n    }\n    case constants.EVENTS.NAMES_END: {\n      const message = parsers.namesEndMessage(preMessage)\n      this.emit(`${message.command}/${channel}`, message)\n      break\n    }\n    case constants.EVENTS.CLEAR_CHAT: {\n      const message = parsers.clearChatMessage(preMessage)\n      const eventName = message.event\n        ? `${message.command}/${message.event}/${channel}`\n        : `${message.command}/${channel}`\n\n      this.emit(eventName, message)\n      break\n    }\n    case constants.EVENTS.HOST_TARGET: {\n      const message = parsers.hostTargetMessage(preMessage)\n      this.emit(`${message.command}/${channel}`, message)\n      break\n    }\n    case constants.EVENTS.MODE: {\n      const message = parsers.modeMessage(preMessage)\n      if (message.username === this.userState.username) {\n        this.channels[message.channel].userState.isModerator =\n          message.isModerator\n      }\n      this.emit(`${message.command}/${channel}`, message)\n      break\n    }\n\n    case constants.EVENTS.GLOBAL_USER_STATE: {\n      const message = parsers.globalUserStateMessage(preMessage)\n      this.userState = message.tags\n      this.emit(message.command, message)\n      break\n    }\n    case constants.EVENTS.USER_STATE: {\n      const message = parsers.userStateMessage(preMessage)\n      this.channels = {\n        ...this.channels,\n        [channel]: {\n          ...this.channels[channel],\n          userState: message.userState,\n        },\n      }\n      this.emit(`${message.command}/${channel}`, message)\n      break\n    }\n    case constants.EVENTS.ROOM_STATE: {\n      const message = parsers.roomStateMessage(preMessage)\n      this.channels = {\n        ...this.channels,\n        [channel]: {\n          ...this.channels[channel],\n          roomState: message.roomState,\n        },\n      }\n      this.emit(`${message.command}/${channel}`, message)\n      break\n    }\n    case constants.EVENTS.NOTICE: {\n      const message = parsers.noticeMessage(preMessage)\n      this.emit(`${message.command}/${message.event}/${channel}`, message)\n      break\n    }\n    case constants.EVENTS.USER_NOTICE: {\n      const message = parsers.userNoticeMessage(preMessage)\n      this.emit(`${message.command}/${message.event}/${channel}`, message)\n      break\n    }\n    case constants.EVENTS.PRIVATE_MESSAGE: {\n      const message = parsers.privateMessage(preMessage)\n      this.emit(`${message.command}/${channel}`, message)\n      break\n    }\n\n    default: {\n      const eventName =\n        channel === '#'\n          ? preMessage.command\n          : `${preMessage.command}/${channel}`\n      this.emit(eventName, preMessage)\n    }\n  }\n}\n\nexport { constants }\nexport default Chat\n"]}