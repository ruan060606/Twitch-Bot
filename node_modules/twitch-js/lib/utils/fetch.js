'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseResponse = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _formData = require('form-data');

var _formData2 = _interopRequireDefault(_formData);

var _qs = require('qs');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Fetch options
 * @typedef {Object} FetchOptions
 * @property {string} [options.method=get] The request method, e.g., `get`, `post`.
 * @property {Object} [options.headers] Any headers you want to add to your request.
 * @property {Object} [options.search] Any query parameters you want to add to your request.
 * @property {Object|FormData} [options.body] Any body that you want to add to your request.
 */

/**
 * Fetches URL
 * @param {string} url
 * @param {FetchOptions} [options]
 * @param {Object} [qsOptions]
 * @return {Promise<Object, Object>}
 */
var fetchUtil = function fetchUtil(url) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var qsOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var isBodyJson = options.body && !(options.body instanceof _formData2.default) && _typeof(options.body) === 'object';

  var body = isBodyJson ? JSON.stringify(options.body) : options.body;

  var headers = isBodyJson ? _extends({}, options.headers, { 'Content-Type': 'application/json' }) : options.headers;

  var search = _typeof(options.search) === 'object' ? '?' + (0, _qs.stringify)(options.search, qsOptions) : '';

  return (0, _nodeFetch2.default)('' + url + search, _extends({}, options, {
    method: options.method || 'get',
    search: undefined,
    headers: headers,
    body: body
  })).then(parseResponse);
};

/** @ignore */
var parseResponse = function parseResponse(response) {
  return response.json().then(function (json) {
    if (!response.ok) {
      var error = new Error(response.url + ' ' + response.statusText);
      error.response = json;
      throw error;
    }
    return json;
  }).catch(function (error) {
    error.ok = false;
    error.status = response.status;
    error.statusText = response.statusText;
    error.url = response.url;
    throw error;
  });
};

exports.parseResponse = parseResponse;
exports.default = fetchUtil;
//# sourceMappingURL=fetch.js.map